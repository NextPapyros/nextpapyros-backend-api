// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextPapyros.Infrastructure.Persistence;

#nullable disable

namespace NextPapyros.Infrastructure.Migrations
{
    [DbContext(typeof(NextPapyrosDbContext))]
    [Migration("20251014201724_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NextPapyros.Domain.Entities.Devolucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VentaId");

                    b.ToTable("Devoluciones");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.DevolucionLinea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadDevuelta")
                        .HasColumnType("int");

                    b.Property<int>("DevolucionId")
                        .HasColumnType("int");

                    b.Property<int>("LineaVentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DevolucionId");

                    b.HasIndex("LineaVentaId");

                    b.ToTable("DevolucionLineas");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.LineaOrdenCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadSolicitada")
                        .HasColumnType("int");

                    b.Property<double>("CostoUnitario")
                        .HasColumnType("float");

                    b.Property<int>("OrdenCompraId")
                        .HasColumnType("int");

                    b.Property<string>("ProductoCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Subtotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrdenCompraId");

                    b.HasIndex("ProductoCodigo");

                    b.ToTable("LineasOrdenCompra");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.LineaRecepcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadRecibida")
                        .HasColumnType("int");

                    b.Property<string>("ProductoCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RecepcionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoCodigo");

                    b.HasIndex("RecepcionId");

                    b.ToTable("LineasRecepcion");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.LineaVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<double>("PrecioUnitario")
                        .HasColumnType("float");

                    b.Property<string>("ProductoCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Subtotal")
                        .HasColumnType("float");

                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoCodigo");

                    b.HasIndex("VentaId");

                    b.ToTable("LineasVenta");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.LogOperacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdEntidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.MovimientoInventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductoCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProductoCodigo");

                    b.ToTable("MovimientosInventario");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.OrdenCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEsperada")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorId");

                    b.ToTable("OrdenesCompra");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Producto", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<double>("Costo")
                        .HasColumnType("float");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.ProductoProveedor", b =>
                {
                    b.Property<string>("ProductoCodigo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<double>("CostoReferencial")
                        .HasColumnType("float");

                    b.Property<bool>("Preferente")
                        .HasColumnType("bit");

                    b.HasKey("ProductoCodigo", "ProveedorId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("ProductoProveedores");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Recepcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("NroFacturaGuia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdenCompraId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdenCompraId");

                    b.ToTable("Recepciones");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.RolPermiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermisoId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermisoId");

                    b.HasIndex("RolId", "PermisoId")
                        .IsUnique();

                    b.ToTable("RolPermisos");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UltimoAcceso")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.UsuarioRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.HasIndex("UsuarioId", "RolId")
                        .IsUnique();

                    b.ToTable("UsuarioRoles");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MotivoAnulacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Devolucion", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Venta", "Venta")
                        .WithMany("Devoluciones")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.DevolucionLinea", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Devolucion", "Devolucion")
                        .WithMany("Lineas")
                        .HasForeignKey("DevolucionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextPapyros.Domain.Entities.LineaVenta", "LineaVenta")
                        .WithMany()
                        .HasForeignKey("LineaVentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Devolucion");

                    b.Navigation("LineaVenta");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.LineaOrdenCompra", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.OrdenCompra", "OrdenCompra")
                        .WithMany("Lineas")
                        .HasForeignKey("OrdenCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextPapyros.Domain.Entities.Producto", "Producto")
                        .WithMany("LineasOrdenCompra")
                        .HasForeignKey("ProductoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenCompra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.LineaRecepcion", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Producto", "Producto")
                        .WithMany("LineasRecepcion")
                        .HasForeignKey("ProductoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextPapyros.Domain.Entities.Recepcion", "Recepcion")
                        .WithMany("Lineas")
                        .HasForeignKey("RecepcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Recepcion");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.LineaVenta", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Producto", "Producto")
                        .WithMany("LineasVenta")
                        .HasForeignKey("ProductoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextPapyros.Domain.Entities.Venta", "Venta")
                        .WithMany("Lineas")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.LogOperacion", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Logs")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.MovimientoInventario", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Producto", "Producto")
                        .WithMany("Movimientos")
                        .HasForeignKey("ProductoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.OrdenCompra", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Proveedor", "Proveedor")
                        .WithMany("OrdenesEmitidas")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.ProductoProveedor", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Producto", "Producto")
                        .WithMany("Proveedores")
                        .HasForeignKey("ProductoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextPapyros.Domain.Entities.Proveedor", "Proveedor")
                        .WithMany("Productos")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Recepcion", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.OrdenCompra", "OrdenCompra")
                        .WithMany()
                        .HasForeignKey("OrdenCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenCompra");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.RolPermiso", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Permiso", "Permiso")
                        .WithMany("Roles")
                        .HasForeignKey("PermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextPapyros.Domain.Entities.Rol", "Rol")
                        .WithMany("Permisos")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.UsuarioRol", b =>
                {
                    b.HasOne("NextPapyros.Domain.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextPapyros.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Roles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Devolucion", b =>
                {
                    b.Navigation("Lineas");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.OrdenCompra", b =>
                {
                    b.Navigation("Lineas");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Permiso", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Producto", b =>
                {
                    b.Navigation("LineasOrdenCompra");

                    b.Navigation("LineasRecepcion");

                    b.Navigation("LineasVenta");

                    b.Navigation("Movimientos");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Proveedor", b =>
                {
                    b.Navigation("OrdenesEmitidas");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Recepcion", b =>
                {
                    b.Navigation("Lineas");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Rol", b =>
                {
                    b.Navigation("Permisos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("NextPapyros.Domain.Entities.Venta", b =>
                {
                    b.Navigation("Devoluciones");

                    b.Navigation("Lineas");
                });
#pragma warning restore 612, 618
        }
    }
}
